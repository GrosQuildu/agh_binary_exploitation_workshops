#!/usr/bin/env python

from sqlalchemy import create_engine
from sqlalchemy import Column, Integer, String, DateTime, Table, ForeignKey, Sequence
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, backref, aliased
from sqlalchemy.exc import IntegrityError
from sqlalchemy import func
import datetime
from termcolor import colored


Base = declarative_base()
default_color = '\e[39m'


class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
    name = Column(String, unique=True)
    tasks = relationship(
                'Task',
                secondary='solutions',
                back_populates='users'
            )

    def __repr__(self):
        return '{} - {} task solved'.format(self.name, len(self.tasks))


class Task(Base):
    __tablename__ = 'tasks'
    id = Column(Integer, Sequence('task_id_seq'), primary_key=True)
    name = Column(String, unique=True)
    lab_no = Column(Integer, unique=True)
    users = relationship(
                'User',
                secondary='solutions',
                back_populates='tasks'
            )

    def __repr__(self):
        return '{} - solved {} times'.format(self.name, len(self.users))


class Solution(Base):
    __tablename__ = 'solutions'
    id = Column(Integer, Sequence('solution_id_seq'), primary_key=True)

    user_id = Column(Integer, ForeignKey('users.id'))
    task_id = Column(Integer, ForeignKey('tasks.id'))

    user = relationship(User, backref=backref('solutions', cascade='all, delete-orphan'))
    task = relationship(Task, backref=backref('solutions', cascade='all, delete-orphan'))

    solve_time = Column(DateTime, default=datetime.datetime.utcnow)

    def __repr__(self):
        return '{} ({})'.format(self.user.name, self.solve_time)


def init_engine():
    return create_engine('sqlite:///:memory:', echo=False)


def init_session(engine):
    Session = sessionmaker()
    Session.configure(bind=engine)
    return Session()


def init_db(engine):
    Base.metadata.create_all(engine)


def register(s,username):
    u = User(name=username)
    try:
        u = s.add(u)
        s.commit()
        return (True, 'User created')
    except IntegrityError as e:
        s.rollback()
        return (False, 'User already exists')


def add_task(s, taskname, lab_no):
    t = Task(name=taskname, lab_no=lab_no)
    try:
        t = s.add(t)
        s.commit()
        return (True, 'Task created')
    except IntegrityError as e:
        s.rollback()
        return (False, 'Task already exists')


def solve(s, username, taskname):
    u = s.query(User).filter(User.name == username).first()
    if u is None:
        return (False, 'No such user')
    t = s.query(Task).filter(Task.name == taskname).first()
    if t is None:
        return (False, 'No such task')
    
    u.tasks.append(t)
    return (True, 'Task solved!')


def print_menu():
    print('1) register\n'
             '2) solve task\n'
             '3) show stats\n'
             'exit) done'
    )


def try_register(s):
    username = input('gimme username: ')
    result, msg = register(s, username)

    color = 'red'
    if result:
        color = 'green'
    print(colored(msg, color))


def try_solve(s):
    username = input('gimme username: ')
    taskname = input('gimme taskname: ')
    result, msg = solve(s, username, taskname)

    color = 'red'
    if result:
        color = 'green'
    print(colored(msg, color))


def show_stats(s):
    print('1) all stats\n'
          '2) task stask')
    i = input('> ').lower()

    if i.startswith('1'):
        for u in s.query(User).all():
            print(u)
    else:
        taskname = input('gimme taskname: ')
        solutions_all = s.query(Solution).filter(Solution.task.has(Task.name == taskname)).order_by(Solution.solve_time.asc()).all()
        if len(solutions_all) > 0:
            print(colored(solutions_all[0].task, 'cyan'))
            for i, sol in enumerate(solutions_all):
                color = 'cyan'
                if i < 3:
                    color = ['green', 'yellow', 'blue'][i]
                print('{}\t->\t{} ({})'.format(i, colored(sol.user.name, color), sol.solve_time))
            print('')
        else:
            print(colored('No such task', 'red'))


def test(s):
    register(s, 'u1')
    register(s, 'u2')
    register(s, 'u3')
    register(s, 'sialalala')
    add_task(s, 't1', 1)
    add_task(s, 't2', 1)
    add_task(s, 't3', 2)

    solve(s, 'u1', 't1')
    solve(s, 'u1', 't2')
    solve(s, 'u2', 't1')
    solve(s, 'u2', 't2')
    solve(s, 'u1', 't3')
    solve(s, 'u1', 't1')
    solve(s, 'u3', 't1')
    solve(s, 'sialalala', 't1')

    

if __name__ == '__main__':
    engine = init_engine()
    s = init_session(engine)
    init_db(engine)

    test(s)

    cmd = ''
    while True:
        print_menu()
        cmd = input('> ').lower()
        
        if cmd == '1':
            try_register(s)
        elif cmd == '2':
            try_solve(s)
        elif cmd == '3':
            show_stats(s)
        elif cmd.startswith('exit'):
            break
        else:
            print('wrong cmd')

