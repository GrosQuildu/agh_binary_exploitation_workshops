#!/usr/bin/env python

from sqlalchemy import create_engine
from sqlalchemy import Column, Integer, String, DateTime, Table, ForeignKey, Sequence
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, backref
from sqlalchemy.exc import IntegrityError
import datetime


Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
    name = Column(String, unique=True)
    tasks = relationship(
                'Task',
                secondary='solutions',
                back_populates='users'
            )

    def __repr__(self):
        return '{} - {} task solved'.format(self.name, len(self.tasks))


class Task(Base):
    __tablename__ = 'tasks'
    id = Column(Integer, Sequence('task_id_seq'), primary_key=True)
    name = Column(String, unique=True)
    lab_no = Column(Integer, unique=True)
    users = relationship(
                'User',
                secondary='solutions',
                back_populates='tasks'
            )

    def __repr__(self):
        return '{} - solved {} times'.format(self.name, len(self.users))


class Solution(Base):
    __tablename__ = 'solutions'
    id = Column(Integer, Sequence('solution_id_seq'), primary_key=True)

    user_id = Column(Integer, ForeignKey('users.id'))
    task_id = Column(Integer, ForeignKey('tasks.id'))

    user = relationship(User, backref=backref('solutions', cascade='all, delete-orphan'))
    task = relationship(Task, backref=backref('solutions', cascade='all, delete-orphan'))

    solve_time = Column(DateTime, default=datetime.datetime.utcnow)

    def __repr__(self):
        return '{} - {} ({})'.format(self.user.name, self.task.name, self.solve_time)


def init_engine():
    return create_engine('sqlite:///:memory:', echo=False)


def init_session(engine):
    Session = sessionmaker()
    Session.configure(bind=engine)
    return Session()


def init_db(engine):
    Base.metadata.create_all(engine)


def register(s,username):
    u = User(name=username)
    try:
        u = s.add(u)
        s.commit()
        return (True, 'User created')
    except IntegrityError as e:
        s.rollback()
        return (False, 'User already exists')


def add_task(s, taskname, lab_no):
    t = Task(name=taskname, lab_no=lab_no)
    try:
        t = s.add(t)
        s.commit()
        return (True, 'Task created')
    except IntegrityError as e:
        s.rollback()
        return (False, 'Task already exists')


def solve_task(s, username, taskname):
    u = s.query(User).filter(User.name == username).first()
    if u is None:
        return (False, 'No such user')
    t = s.query(Task).filter(Task.name == taskname).first()
    if t is None:
        return (False, 'No such task')
    
    u.tasks.append(t)
    return (True, 'Task solved!')


if __name__ == '__main__':
    engine = init_engine()
    s = init_session(engine)
    init_db(engine)
    
    register(s, 'a')
    add_task(s, 'task1', 1)
    
    solve_task(s,'a','task1')
    print(s.query(User).first().solutions)


